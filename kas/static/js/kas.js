// Generated by CoffeeScript 1.4.0
(function() {
  var addItem;

  window.App = angular.module('kas', ['kas.controllers', 'typeahead']).config([
    '$routeProvider', function($routeProvider) {
      $routeProvider.when('/transactions', {
        templateUrl: window.prefix + 'partials/kas/transactions.html',
        controller: 'TransactionController'
      });
      $routeProvider.when('/closures', {
        templateUrl: window.prefix + 'partials/kas/closures.html',
        controller: 'ClosureController'
      });
      $routeProvider.when('/closures/:closureID', {
        templateUrl: window.prefix + 'partials/kas/closure.html',
        controller: 'ClosureDetailController'
      });
      $routeProvider.otherwise({
        redirectTo: '/transactions'
      });
    }
  ]);

  addItem = {};

  angular.module('kas.controllers', ['kas.apiv2']).controller('TransactionController', [
    '$scope', 'Transaction', function($scope, Transaction) {
      $scope.transactions = [];
      Transaction.all(function(transactions, meta) {
        return $scope.transactions = transactions;
      });
      addItem = function(transaction) {
        return $scope.transactions.push(transaction);
      };
      $scope.next = function() {
        return $scope.transactions.next(function(transactions) {
          return $scope.transactions = transactions;
        });
      };
      return $scope.previous = function() {
        return $scope.transactions.previous(function(transactions) {
          return $scope.transactions = transactions;
        });
      };
    }
  ]).controller('TransactionFormController', [
    '$scope', 'Transaction', function($scope, Transaction) {
      angular.element("input[ng-model='amount']").focus();
      $scope.inout = "OUT";
      $scope.toggleInout = function() {
        $scope.inout = $scope.inout === "OUT" ? "IN" : "OUT";
        if ($scope.inout === "OUT") {
          return $scope.method = "CASH";
        }
      };
      $scope.method = "CASH";
      $scope.toggleMethod = function() {
        $scope.method = $scope.method === "CASH" ? "PIN" : "CASH";
        if ($scope.method === "PIN") {
          return $scope.inout = "IN";
        }
      };
      return $scope.submit = function() {
        var transaction;
        if ($scope.amount && $scope.description) {
          transaction = new Transaction();
          transaction.amount = Math.abs(parseFloat($scope.amount.replace(',', '.')));
          if ($scope.inout === "OUT") {
            transaction.amount *= -1;
          }
          transaction.method = $scope.method === "CASH" ? "C" : "P";
          transaction.description = $scope.description;
          transaction.valid = true;
          return transaction.create(function(obj) {
            $scope.inout = "OUT";
            $scope.method = "CASH";
            $scope.amount = "";
            $scope.description = "";
            addItem(obj);
            return angular.element("input[ng-model='amount']").focus();
          });
        }
      };
    }
  ]).controller('ClosureController', [
    '$scope', 'Transaction', 'Closure', function($scope, Transaction, Closure) {
      $scope.unfinished = false;
      Closure.unfinished(function(closure) {
        if (closure.total_count === 1) {
          return $scope.unfinished = closure[0];
        }
      });
      $scope.closures = [];
      Closure.all(function(closures) {
        return $scope.closures = closures;
      });
      return $('.extrainfo').popover({
        trigger: "focus",
        placement: "bottom",
        title: "Informatie"
      });
    }
  ]).controller('ClosureFormController', [
    '$scope', '$location', 'Transaction', 'Closure', function($scope, $location, Transaction, Closure) {
      return $scope.newclosure = function() {
        var closure, transaction_cash, transaction_pin;
        if ($scope.in_cash) {
          transaction_cash = new Transaction();
          transaction_cash.amount = parseFloat($scope.in_cash.replace(',', '.'));
          transaction_cash.method = "C";
          transaction_cash.description = "Kasinkomsten";
          transaction_cash.valid = true;
          transaction_cash.create(function(obj) {});
        }
        if ($scope.in_pin) {
          transaction_pin = new Transaction();
          transaction_pin.amount = parseFloat($scope.in_pin.replace(',', '.'));
          transaction_pin.method = "P";
          transaction_pin.description = "Pininkomsten";
          transaction_pin.valid = true;
          transaction_pin.create(function(obj) {});
        }
        closure = new Closure();
        return closure.create(function(obj) {
          return $location.path('/closures/' + obj.id);
        });
      };
    }
  ]).controller('ClosureDetailController', [
    '$routeParams', '$scope', 'Transaction', 'Closure', function($routeParams, $scope, Transaction, Closure) {
      $scope.closure = false;
      $scope.transactions = [];
      Closure.get($routeParams.closureID, function(closure) {
        $scope.closure = closure;
        if (!$scope.closure.finished) {
          $scope.closure.update(function(closure) {
            return $scope.closure = closure;
          });
        }
        return $scope.loadTransactions();
      });
      $scope.loadTransactions = function() {
        return Transaction.inClosure($scope.closure, function(transactions) {
          return $scope.transactions = transactions;
        });
      };
      $scope.save = function() {
        return $scope.closure.update(function(closure) {
          $scope.loadTransactions();
          $scope.closure = closure;
          if (($scope.closure.cashdifference === 0 && $scope.closure.pindifference === 0) || $scope.confirmed) {
            $scope.closure.finished = true;
            return $scope.closure.update(function(closure) {
              $scope.confirmed = $scope.problem = false;
              return alert("Dagafsluiting voltooid.");
            });
          } else {
            return $scope.problem = true;
          }
        });
      };
      $scope.confirm = function() {
        $scope.confirmed = true;
        return $scope.save();
      };
      $scope.$watch("closure.num_e500 + closure.num_e200 + closure.num_e100 + closure.num_e50 + closure.num_e20 + closure.num_e10 + closure.num_e5 + closure.num_e2 + closure.num_e1 + closure.num_e050 + closure.num_e020 + closure.num_e010 + closure.num_e005", function() {
        return $scope.closure.total = 500 * $scope.closure.num_e500 + 200 * $scope.closure.num_e200 + 100 * $scope.closure.num_e100 + 50 * $scope.closure.num_e50 + 20 * $scope.closure.num_e20 + 10 * $scope.closure.num_e10 + 5 * $scope.closure.num_e5 + 2 * $scope.closure.num_e2 + 1 * $scope.closure.num_e1 + 0.5 * $scope.closure.num_e050 + 0.2 * $scope.closure.num_e020 + 0.1 * $scope.closure.num_e010 + 0.05 * $scope.closure.num_e005;
      });
      return $(document).delegate('input.input-mini', 'keyup', function() {
        return $scope.$digest();
      });
    }
  ]);

  angular.module('kas.apiv2', ['dienst2']).factory('Transaction', [
    'Tastypie', function(Tastypie) {
      var Transaction;
      Transaction = Tastypie('api/v2/transaction/');
      Transaction.prototype.toString = function() {
        return this.description;
      };
      Transaction.prototype.toggleValid = function() {
        if (this.editable) {
          this.valid = this.valid ? false : true;
          return this.update();
        }
      };
      Transaction.inClosure = function(closure, success) {
        var params;
        params = {
          'limit': 0,
          'date__lte': closure.date
        };
        if (closure.previousdate) {
          params.date__gt = closure.previousdate;
        }
        return Transaction._more({
          method: 'GET',
          url: Transaction.api_root,
          params: params
        }, success);
      };
      return Transaction;
    }
  ]).factory('Closure', [
    'Tastypie', function(Tastypie) {
      var Closure;
      Closure = Tastypie('api/v2/closure/');
      Closure.prototype.toString = function() {
        return this.date;
      };
      Closure.unfinished = function(success) {
        return Closure._more({
          method: 'GET',
          url: Closure.api_root,
          params: {
            'finished': false
          }
        }, success);
      };
      return Closure;
    }
  ]);

}).call(this);
